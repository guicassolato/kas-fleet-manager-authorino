# Main AuthConfig to protect the Kafka Management API (kas-fleet-manager).
apiVersion: authorino.kuadrant.io/v1beta1
kind: AuthConfig
metadata:
  name: kas-fleet-manager
  labels:
    authorino.kuadrant.io/tenant: kas-fleet-manager
spec:
  hosts:
  - kas-fleet-manager-kas-fleet-manager-authorino.apps.${K8S_CLUSTER_DOMAIN}

  when:
  - selector: context.request.http.path
    operator: matches
    value: ^/api/kafkas_mgmt/v1/.+

  patterns:
    acl-required:
    - selector: "context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":4}"
      operator: neq
      value: agent-clusters
    - selector: "context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":4}"
      operator: neq
      value: admin
    kafka-resource-route:
    - selector: context.request.http.path
      operator: matches
      value: /kafkas/[^/]+$
    create-kafka-route:
    - selector: context.request.http.path
      operator: matches
      value: /kafkas/?$
    - selector: context.request.http.method
      operator: eq
      value: POST
    agent-clusters-route:
    - selector: "context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":4}"
      operator: eq
      value: agent-clusters
    admin-route:
    - selector: "context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":4}"
      operator: eq
      value: admin

  identity:
  - name: redhat-sso
    oidc:
      endpoint: https://sso.redhat.com/auth/realms/redhat-external
      ttl: 3600
  - name: admin-sso
    when:
    - patternRef: admin-route
    oidc:
      endpoint: https://auth.redhat.com/auth/realms/EmployeeIDP
      ttl: 3600

  metadata:
  - name: resource-info
    when:
    - patternRef: kafka-resource-route
    http:
      endpoint: "https://kas-fleet-manager-envoy.kas-fleet-manager-authorino.svc:9001/api/kafkas_mgmt/v1/authz-metadata/kafkas/{context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":5}}"
      contentType: application/json
      sharedSecretRef:
        name: authorino-metadata-client
        key: api_key
      credentials:
        in: custom_header
        keySelector: x-api-key
      headers:
      - name: x-authz-request-id
        valueFrom: { authJSON: context.request.http.id }
    cache:
      key:
        valueFrom: { authJSON: "context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":5}" }
      ttl: 300

  - name: cluster-info
    when:
    - patternRef: agent-clusters-route
    http:
      endpoint: "https://kas-fleet-manager-envoy.kas-fleet-manager-authorino.svc:9001/api/kafkas_mgmt/v1/authz-metadata/agent-clusters/{context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":5}}"
      contentType: application/json
      sharedSecretRef:
        name: authorino-metadata-client
        key: api_key
      credentials:
        in: custom_header
        keySelector: x-api-key
      headers:
      - name: x-authz-request-id
        valueFrom: { authJSON: context.request.http.id }
    cache:
      key:
        valueFrom: { authJSON: "context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":5}" }
      ttl: 300

  - name: terms-and-conditions
    when:
    - patternRef: create-kafka-route
    http:
      endpoint: https://api.stage.openshift.com/api/authorizations/v1/self_terms_review
      method: POST
      bodyParameters:
      - name: account_username
        valueFrom: { authJSON: auth.identity.username }
      - name: site_code
        value: OCM
      - name: event_code
        value: register
      contentType: application/json
      headers:
      - name: Authorization
        valueFrom: { authJSON: context.request.http.headers.authorization }
    cache:
      key:
        valueFrom: { authJSON: auth.identity.username }
      ttl: 300

  authorization:
  # Access Control Lists
  - name: allow-list
    when:
    - patternRef: acl-required
    opa:
      inlineRego: |
        list := [
          "12147054", # The App SRE team
          "13639843", # The Kafka Instances team
          "13785172", # The MK Security team
          "13645369", # The Running the Service team
          "16414676", # The Kuadrant team
        ]
        allow { list[_] == input.auth.identity.org_id }

  - name: deny-list
    when:
    - patternRef: acl-required
    opa:
      inlineRego: |
        list := [
          "denied-test-user1@example.com",
          "denied-test-user2@example.com",
        ]
        denied { list[_] == input.auth.identity.email }
        allow { not denied }

  # JWT claim: typ
  - name: bearer-token
    json:
      rules:
      - selector: auth.identity.typ
        operator: eq
        value: Bearer

  # JWT claim: iss
  - name: redhat-sso
    when:
    - selector: "context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":4}"
      operator: neq
      value: admin
    json:
      rules:
      - selector: auth.identity.iss
        operator: eq
        value: https://sso.redhat.com/auth/realms/redhat-external

  - name: admin-sso
    when:
    - patternRef: admin-route
    json:
      rules:
      - selector: auth.identity.iss
        operator: eq
        value: https://auth.redhat.com/auth/realms/EmployeeIDP

  # JWT claim: org_id
  - name: require-org-id
    when:
    - selector: "context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":4}"
      operator: matches
      value: ^(kafkas|service_accounts|instance_types)$
    json:
      rules:
      - selector: auth.identity.org_id
        operator: neq
        value: ""

  # JWT claim: clientId
  - name: cluster-id
    when:
    - patternRef: agent-clusters-route
    opa:
      inlineRego: |
        allow { input.auth.identity.clientId == object.get(input.auth.metadata, "cluster-info", {}).client_id }

  # Terms & Conditions
  - name: terms-and-conditions
    when:
    - patternRef: create-kafka-route
    json:
      rules:
      - selector: auth.metadata.terms-and-conditions.terms_required
        operator: eq
        value: "false"

  # Resource Owner
  - name: owner
    when:
    - patternRef: kafka-resource-route
    opa:
      inlineRego: |
        org_id := input.auth.identity.org_id
        filter_by_org { org_id }
        is_org_admin := input.auth.identity.is_org_admin

        resource_data := object.get(input.auth.metadata, "resource-info", {})
        same_org { resource_data.organisation_id == org_id }
        is_owner { resource_data.owner == input.auth.identity.username }

        has_permission { filter_by_org; same_org; is_org_admin }
        has_permission { filter_by_org; same_org; is_owner } # TODO: Confirm this rule
        has_permission { not filter_by_org; is_owner }

        new_owner_ok := true # TODO: Check if new owner is part of the same organisation - requires: (1) access to the body of the request, (2) request to AMS to obtain the new owner's org info

        method := input.context.request.http.method

        allow { method == "GET";    has_permission }
        allow { method == "DELETE"; has_permission }
        allow { method == "PATCH";  has_permission; new_owner_ok }

  # Admin RBAC
  - name: admin-rbac
    when:
    - patternRef: admin-route
    opa:
      inlineRego: |
        method := input.context.request.http.method
        roles := input.auth.identity.realm_access.roles
        allow { method == "GET";    roles[_] == "kas-fleet-manager-admin-full" }
        allow { method == "GET";    roles[_] == "kas-fleet-manager-admin-read" }
        allow { method == "GET";    roles[_] == "kas-fleet-manager-admin-write" }
        allow { method == "PATCH";  roles[_] == "kas-fleet-manager-admin-full" }
        allow { method == "PATCH";  roles[_] == "kas-fleet-manager-admin-write" }
        allow { method == "DELETE"; roles[_] == "kas-fleet-manager-admin-full" }

  # Lock down authz-metadata endpoints
  - name: internal-endpoints
    json:
      rules:
      - selector: "context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":4}"
        operator: neq
        value: authz-metadata

  # Custom 403 denial as JSON when unauthorized
  denyWith:
    unauthorized:
      headers:
      - name: content-type
        value: "application/json"
      body:
        value: |
          {
            "kind": "Error",
            "id": "403",
            "href": "/api/kafkas_mgmt/v1/errors/403",
            "code": "KAFKAS-MGMT-403",
            "reason": "Forbidden"
          }
---
apiVersion: v1
kind: Secret
metadata:
  name: authorino-metadata-client
  labels:
    authorino.kuadrant.io/secret: "api-key"
    authorino.kuadrant.io/tenant: kas-fleet-manager
    authorino.kuadrant.io/audience: kas-fleet-manager-pip
stringData:
  api_key: IOJQf1dh5Vm+zKB/KC4L4LoiI/w48/KkcSfDtflkX3U=
type: Opaque
