apiVersion: authorino.3scale.net/v1beta1
kind: AuthConfig
metadata:
  name: kas-fleet-manager-protection
spec:
  hosts:
  - api.openshift.com
  - api.stage.openshift.com
  - kas-fleet-manager.127.0.0.1.nip.io # local demo
  identity:
  - name: redhat-external
    oidc:
      endpoint: https://sso.redhat.com/auth/realms/redhat-external
  metadata:
  - name: ams-current-account
    http:
      endpoint: https://api.openshift.com/api/accounts_mgmt/v1/current_account
      method: GET
      headers:
        - name: Authorization
          valueFrom:
            authJSON: context.request.http.headers.authorization
  - name: quota-cost
    http:
      endpoint: https://api.openshift.com/api/accounts_mgmt/v1/organizations/{auth.metadata.ams-current-account.organization.id}/quota_cost?fetchRelatedResources=true&search=allowed%20%3E%200
      method: GET
      headers:
        - name: Authorization
          valueFrom:
            authJSON: context.request.http.headers.authorization
    priority: 1
  authorization:
  - name: quota-check
    opa:
      inlineRego: |
        import input.context.request.http as req

        create_kafka_instance {
          req.method == "POST"
          req.path == "/api/kafkas_mgmt/v1/kafkas"
        }

        quota = object.get(input.auth.metadata, "quota-cost", {})

        quota_type_std__billing_model_std {
          quota.items[i].related_resources[j].resource_name == "rhosak"
          quota.items[i].related_resources[j].product == "RHOSAK"
          quota.items[i].related_resources[j].billing_model == "standard"
        }

        quota_type_std__billing_model_marketplace {
          quota.items[i].related_resources[j].resource_name == "rhosak"
          quota.items[i].related_resources[j].product == "RHOSAK"
          quota.items[i].related_resources[j].billing_model == "marketplace"
        }

        allow { not create_kafka_instance }
        allow { create_kafka_instance; quota_type_std__billing_model_std }
        allow { create_kafka_instance; quota_type_std__billing_model_marketplace }
